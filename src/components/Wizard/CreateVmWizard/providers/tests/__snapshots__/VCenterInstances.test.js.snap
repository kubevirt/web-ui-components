// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<VCenterInstancesConnected /> for list of vCenter secrets renders correctly 1`] = `
<VCenterInstances
  extraProps={
    Object {
      "WithResources": [Function],
      "basicSettings": Object {
        "flavor": Object {
          "value": "small",
        },
        "name": Object {
          "value": "name",
        },
        "namespace": Object {
          "value": "default",
        },
        "operatingSystem": Object {
          "value": Object {
            "id": "rhel7.0",
            "name": "Red Hat Enterprise Linux 7.0",
          },
        },
        "provider": Object {
          "value": "VMWare",
        },
        "provisionSourceType": Object {
          "value": "Import",
        },
        "rememberVmwareCredentials": Object {
          "value": true,
        },
        "vCenterInstance": Object {
          "value": "Connect to New Instance",
        },
        "vmwareURL": Object {
          "value": "my.domain.com",
        },
        "vmwareUserName": Object {
          "value": "username",
        },
        "vmwareUserPwdCheck": Object {
          "value": Object {
            "vmwareConnection": Object {
              "V2VVmwareName": "v2vvmware-object-name",
            },
            "vmwareUserPwd": "password",
          },
        },
        "workloadProfile": Object {
          "value": "generic",
        },
      },
    }
  }
  id="test-dropdown-id"
  onChange={[MockFunction]}
  value="test-instance-1"
>
  <WithResources
    resourceMap={
      Object {
        "vCenterSecrets": Object {
          "resource": Object {
            "isList": true,
            "kind": "Secret",
            "namespace": "default",
            "namespaced": true,
            "prop": "Secret",
            "selector": Object {
              "matchExpressions": Array [
                Object {
                  "key": "kubevirt.io/vcenter",
                  "operator": "Exists",
                },
                Object {
                  "key": "kubevirt.io/temporary",
                  "operator": "DoesNotExist",
                },
              ],
            },
          },
        },
      }
    }
    resourceToProps={[Function]}
  >
    <Dropdown
      choices={
        Array [
          "Connect to New Instance",
          "secret-1",
          "secret-2",
        ]
      }
      disabled={false}
      id="test-dropdown-id"
      key=".0"
      onChange={[MockFunction]}
      value="test-instance-1"
      withTooltips={false}
    >
      <ButtonGroup
        block={false}
        bsClass="btn-group"
        justified={true}
        key="test-dropdown-id"
        vertical={false}
      >
        <div
          className="btn-group btn-group-justified"
        >
          <DropdownButton
            bsStyle="default"
            className="kubevirt-dropdown"
            disabled={false}
            id="test-dropdown-id"
            onSelect={[MockFunction]}
            title="test-instance-1"
          >
            <DropdownButton
              bsStyle="default"
              className="kubevirt-dropdown"
              disabled={false}
              id="test-dropdown-id"
              onSelect={[MockFunction]}
              title="test-instance-1"
            >
              <Uncontrolled(Dropdown)
                bsStyle="default"
                disabled={false}
                id="test-dropdown-id"
                onSelect={[MockFunction]}
              >
                <Dropdown
                  bsClass="dropdown"
                  bsStyle="default"
                  componentClass={[Function]}
                  disabled={false}
                  id="test-dropdown-id"
                  onSelect={[MockFunction]}
                  onToggle={[Function]}
                >
                  <ButtonGroup
                    block={false}
                    bsClass="btn-group"
                    bsStyle="default"
                    className="dropdown"
                    justified={false}
                    vertical={false}
                  >
                    <div
                      className="dropdown btn-group btn-group-default"
                    >
                      <DropdownToggle
                        bsClass="dropdown-toggle"
                        bsRole="toggle"
                        bsStyle="default"
                        className="kubevirt-dropdown"
                        disabled={false}
                        id="test-dropdown-id"
                        key=".0"
                        onClick={[Function]}
                        onKeyDown={[Function]}
                        open={false}
                        useAnchor={false}
                      >
                        <Button
                          active={false}
                          aria-expanded={false}
                          aria-haspopup={true}
                          block={false}
                          bsClass="btn"
                          bsStyle="default"
                          className="kubevirt-dropdown dropdown-toggle"
                          disabled={false}
                          id="test-dropdown-id"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          role="button"
                        >
                          <button
                            aria-expanded={false}
                            aria-haspopup={true}
                            className="kubevirt-dropdown dropdown-toggle btn btn-default"
                            disabled={false}
                            id="test-dropdown-id"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            role="button"
                            type="button"
                          >
                            test-instance-1
                             
                            <span
                              className="caret"
                            />
                          </button>
                        </Button>
                      </DropdownToggle>
                      <DropdownMenu
                        bsClass="dropdown-menu"
                        bsRole="menu"
                        key=".1"
                        labelledBy="test-dropdown-id"
                        onClose={[Function]}
                        onSelect={[Function]}
                        pullRight={false}
                      >
                        <RootCloseWrapper
                          disabled={true}
                          event="click"
                          onRootClose={[Function]}
                        >
                          <ul
                            aria-labelledby="test-dropdown-id"
                            className="dropdown-menu"
                            role="menu"
                          >
                            <MenuItem
                              bsClass="dropdown"
                              disabled={false}
                              divider={false}
                              eventKey="Connect to New Instance"
                              header={false}
                              key=".$Connect to New Instance"
                              onKeyDown={[Function]}
                              onSelect={[Function]}
                            >
                              <li
                                className=""
                                role="presentation"
                              >
                                <SafeAnchor
                                  componentClass="a"
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  role="menuitem"
                                  tabIndex="-1"
                                >
                                  <a
                                    href="#"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    role="menuitem"
                                    tabIndex="-1"
                                  >
                                    Connect to New Instance
                                  </a>
                                </SafeAnchor>
                              </li>
                            </MenuItem>
                            <MenuItem
                              bsClass="dropdown"
                              disabled={false}
                              divider={false}
                              eventKey="secret-1"
                              header={false}
                              key=".$secret-1"
                              onKeyDown={[Function]}
                              onSelect={[Function]}
                            >
                              <li
                                className=""
                                role="presentation"
                              >
                                <SafeAnchor
                                  componentClass="a"
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  role="menuitem"
                                  tabIndex="-1"
                                >
                                  <a
                                    href="#"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    role="menuitem"
                                    tabIndex="-1"
                                  >
                                    secret-1
                                  </a>
                                </SafeAnchor>
                              </li>
                            </MenuItem>
                            <MenuItem
                              bsClass="dropdown"
                              disabled={false}
                              divider={false}
                              eventKey="secret-2"
                              header={false}
                              key=".$secret-2"
                              onKeyDown={[Function]}
                              onSelect={[Function]}
                            >
                              <li
                                className=""
                                role="presentation"
                              >
                                <SafeAnchor
                                  componentClass="a"
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  role="menuitem"
                                  tabIndex="-1"
                                >
                                  <a
                                    href="#"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    role="menuitem"
                                    tabIndex="-1"
                                  >
                                    secret-2
                                  </a>
                                </SafeAnchor>
                              </li>
                            </MenuItem>
                          </ul>
                        </RootCloseWrapper>
                      </DropdownMenu>
                    </div>
                  </ButtonGroup>
                </Dropdown>
              </Uncontrolled(Dropdown)>
            </DropdownButton>
          </DropdownButton>
        </div>
      </ButtonGroup>
    </Dropdown>
  </WithResources>
</VCenterInstances>
`;
