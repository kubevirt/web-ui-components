// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<VCenterVmsWithPrefill /> does prefill 1`] = `
<VCenterVmsWithPrefill
  basicSettings={
    Object {
      "flavor": Object {
        "value": "small",
      },
      "name": Object {
        "value": "name",
      },
      "namespace": Object {
        "value": "default",
      },
      "operatingSystem": Object {
        "value": Object {
          "id": "rhel7.0",
          "name": "Red Hat Enterprise Linux 7.0",
        },
      },
      "provider": Object {
        "value": "VMWare",
      },
      "provisionSourceType": Object {
        "value": "Import",
      },
      "rememberVmwareCredentials": Object {
        "value": true,
      },
      "vCenterInstance": Object {
        "value": "Connect to New Instance",
      },
      "vmwareHostname": Object {
        "value": "my.domain.com",
      },
      "vmwareUserName": Object {
        "value": "username",
      },
      "vmwareUserPwdCheck": Object {
        "value": Object {
          "vmwareConnection": Object {
            "V2VVmwareName": "v2vvmware-object-name",
          },
          "vmwareUserPwd": "password",
        },
      },
      "vmwareVm": Object {
        "value": "vm-name",
      },
      "workloadProfile": Object {
        "value": "generic",
      },
    }
  }
  choices={
    Array [
      "one-vm",
      "vm-name",
    ]
  }
  disabled={true}
  id="my-id"
  k8sGet={[Function]}
  onChange={[MockFunction]}
  onFormChange={[MockFunction]}
  operatingSystems={
    Array [
      Object {
        "id": "fedora29",
        "name": "Fedora 29",
      },
      Object {
        "id": "fedora28",
        "name": "Fedora 28",
      },
      Object {
        "id": "fedora27",
        "name": "Fedora 27",
      },
      Object {
        "id": "fedora26",
        "name": "Fedora 26",
      },
      Object {
        "id": "fedora25",
        "name": "Fedora 25",
      },
      Object {
        "id": "fedora24",
        "name": "Fedora 24",
      },
      Object {
        "id": "fedora23",
        "name": "Fedora 23",
      },
      Object {
        "id": "rhel7.0",
        "name": "Red Hat Enterprise Linux 7.0",
      },
      Object {
        "id": "ubuntu18.04",
        "name": "Ubuntu 18.04 LTS",
      },
    ]
  }
  value="vm-name"
>
  <Dropdown
    choices={
      Array [
        "one-vm",
        "vm-name",
      ]
    }
    disabled={true}
    id="my-id"
    onChange={[MockFunction]}
    value="vm-name"
    withTooltips={false}
  >
    <ButtonGroup
      block={false}
      bsClass="btn-group"
      justified={true}
      key="my-id"
      vertical={false}
    >
      <div
        className="btn-group btn-group-justified"
      >
        <DropdownButton
          bsStyle="default"
          className="kubevirt-dropdown"
          disabled={true}
          id="my-id"
          onSelect={[MockFunction]}
          title="vm-name"
        >
          <DropdownButton
            bsStyle="default"
            className="kubevirt-dropdown"
            disabled={true}
            id="my-id"
            onSelect={[MockFunction]}
            title="vm-name"
          >
            <Uncontrolled(Dropdown)
              bsStyle="default"
              disabled={true}
              id="my-id"
              onSelect={[MockFunction]}
            >
              <Dropdown
                bsClass="dropdown"
                bsStyle="default"
                componentClass={[Function]}
                disabled={true}
                id="my-id"
                onSelect={[MockFunction]}
                onToggle={[Function]}
              >
                <ButtonGroup
                  block={false}
                  bsClass="btn-group"
                  bsStyle="default"
                  className="dropdown disabled"
                  justified={false}
                  vertical={false}
                >
                  <div
                    className="dropdown disabled btn-group btn-group-default"
                  >
                    <DropdownToggle
                      bsClass="dropdown-toggle"
                      bsRole="toggle"
                      bsStyle="default"
                      className="kubevirt-dropdown"
                      disabled={true}
                      id="my-id"
                      key=".0"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      open={false}
                      useAnchor={false}
                    >
                      <Button
                        active={false}
                        aria-expanded={false}
                        aria-haspopup={true}
                        block={false}
                        bsClass="btn"
                        bsStyle="default"
                        className="kubevirt-dropdown dropdown-toggle"
                        disabled={true}
                        id="my-id"
                        onClick={[Function]}
                        onKeyDown={[Function]}
                        role="button"
                      >
                        <button
                          aria-expanded={false}
                          aria-haspopup={true}
                          className="kubevirt-dropdown dropdown-toggle btn btn-default"
                          disabled={true}
                          id="my-id"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          role="button"
                          type="button"
                        >
                          vm-name
                           
                          <span
                            className="caret"
                          />
                        </button>
                      </Button>
                    </DropdownToggle>
                    <DropdownMenu
                      bsClass="dropdown-menu"
                      bsRole="menu"
                      key=".1"
                      labelledBy="my-id"
                      onClose={[Function]}
                      onSelect={[Function]}
                      pullRight={false}
                    >
                      <RootCloseWrapper
                        disabled={true}
                        event="click"
                        onRootClose={[Function]}
                      >
                        <ul
                          aria-labelledby="my-id"
                          className="dropdown-menu"
                          role="menu"
                        >
                          <MenuItem
                            bsClass="dropdown"
                            disabled={false}
                            divider={false}
                            eventKey="one-vm"
                            header={false}
                            key=".$one-vm"
                            onKeyDown={[Function]}
                            onSelect={[Function]}
                          >
                            <li
                              className=""
                              role="presentation"
                            >
                              <SafeAnchor
                                componentClass="a"
                                onClick={[Function]}
                                onKeyDown={[Function]}
                                role="menuitem"
                                tabIndex="-1"
                              >
                                <a
                                  href="#"
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  role="menuitem"
                                  tabIndex="-1"
                                >
                                  one-vm
                                </a>
                              </SafeAnchor>
                            </li>
                          </MenuItem>
                          <MenuItem
                            bsClass="dropdown"
                            disabled={false}
                            divider={false}
                            eventKey="vm-name"
                            header={false}
                            key=".$vm-name"
                            onKeyDown={[Function]}
                            onSelect={[Function]}
                          >
                            <li
                              className=""
                              role="presentation"
                            >
                              <SafeAnchor
                                componentClass="a"
                                onClick={[Function]}
                                onKeyDown={[Function]}
                                role="menuitem"
                                tabIndex="-1"
                              >
                                <a
                                  href="#"
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  role="menuitem"
                                  tabIndex="-1"
                                >
                                  vm-name
                                </a>
                              </SafeAnchor>
                            </li>
                          </MenuItem>
                        </ul>
                      </RootCloseWrapper>
                    </DropdownMenu>
                  </div>
                </ButtonGroup>
              </Dropdown>
            </Uncontrolled(Dropdown)>
          </DropdownButton>
        </DropdownButton>
      </div>
    </ButtonGroup>
  </Dropdown>
</VCenterVmsWithPrefill>
`;

exports[`<VCenterVmsWithPrefill /> does prefill 2`] = `
Object {
  "target": "intermediaryStorageData",
  "value": Array [
    Object {
      "data": Object {
        "fileName": "[datastore12] ftp-01/ftp-01.vmdk",
        "mountPath": "/data/vm/disk1",
      },
      "id": 0,
      "isBootable": true,
      "name": "disk0",
      "size": 1,
      "storageClass": undefined,
      "storageType": "external-import",
    },
    Object {
      "data": Object {
        "fileName": "filename1",
        "mountPath": "/data/vm/disk2",
      },
      "id": 1,
      "isBootable": false,
      "name": "disk1",
      "size": 2,
      "storageClass": undefined,
      "storageType": "external-import",
    },
    Object {
      "data": Object {
        "mountPath": "/var/tmp",
      },
      "id": 2,
      "name": "v2v-conversion-temp",
      "size": 2,
      "storageClass": undefined,
      "storageType": "external-v2v-temp",
    },
    Object {
      "data": Object {
        "mountPath": "/opt/vmware-vix-disklib-distrib",
      },
      "editable": false,
      "id": 3,
      "name": "vddk-pvc",
      "storageClass": undefined,
      "storageType": "external-v2v-vddk",
    },
  ],
}
`;

exports[`<VCenterVmsWithPrefill /> renders correctly 1`] = `
<Dropdown
  choices={
    Array [
      "one-vm",
      "vm-name",
    ]
  }
  disabled={true}
  id="my-id"
  onChange={[MockFunction]}
  value="vm-name"
  withTooltips={false}
/>
`;
